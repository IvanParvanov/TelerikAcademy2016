{"version":3,"sources":["task1-correct.js"],"names":[],"mappings":"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","file":"task1-correct-compiled.js","sourcesContent":["'use strict';\r\nvar listNode = (function () {\r\n\r\n    class listNode {\r\n        constructor(value) {\r\n            this.data = value;\r\n            this.nextNode = null;\r\n        }\r\n\r\n        get data() {\r\n            return this._data;\r\n        }\r\n\r\n        set data(val) {\r\n            this._data = val;\r\n        }\r\n\r\n        get nextNode() {\r\n            return this._next;\r\n        }\r\n\r\n        set nextNode(val) {\r\n            this._next = val;\r\n        }\r\n    }\r\n\r\n    return listNode;\r\n} ());\r\n\r\nvar LinkedList = (function (listNode) {\r\n\r\n    function getNodeAtIndex(ind) {\r\n        let currNode;\r\n\r\n        if (ind < 0 || this._length - 1 < ind) {\r\n            currNode = null;\r\n        }\r\n        else {\r\n            let i = 0;\r\n\r\n            currNode = this._firstNode;\r\n\r\n            while (i < ind) {\r\n                currNode = currNode.nextNode;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return currNode;\r\n    }\r\n\r\n    class LinkedList {\r\n        constructor() {\r\n            this._length = 0;\r\n            this._firstNode = null;\r\n        }\r\n\r\n        get first() {\r\n            if (this._firstNode !== null) {\r\n                return this._firstNode.data;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        get last() {\r\n            let lastInd = this._length - 1;\r\n            if (this._firstNode !== null) {\r\n                return getNodeAtIndex.call(this, lastInd).data;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        get length() {\r\n            return this._length;\r\n        }\r\n\r\n        append(...args) {\r\n            let itemsToAdd = args;\r\n            itemsToAdd = itemsToAdd.map(el => {\r\n                return new listNode(el);\r\n            });\r\n\r\n            let last;\r\n            let lastInd = this._length - 1;\r\n            if (this._firstNode === null) {\r\n                this._firstNode = itemsToAdd[0];\r\n                last = this._firstNode;\r\n            }\r\n            else {\r\n                last = getNodeAtIndex.call(this, lastInd);\r\n                last.nextNode = itemsToAdd[0];\r\n                last = last.nextNode;\r\n            }\r\n\r\n            this._length += 1;\r\n\r\n            for (let i = 1, len = itemsToAdd.length; i < len; i += 1) {\r\n                let currentItem = itemsToAdd[i];\r\n                last.nextNode = currentItem;\r\n                last = last.nextNode;\r\n                this._length += 1;\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        prepend(...args) {\r\n            let itemsToAdd = args.map(node => { return new listNode(node); });\r\n\r\n            let next = this._firstNode;\r\n            this._firstNode = itemsToAdd[0];\r\n            this._length += 1;\r\n\r\n            let curr = this._firstNode;\r\n            for (let i = 1, len = itemsToAdd.length; i < len; i += 1) {\r\n                curr.nextNode = itemsToAdd[i];\r\n                curr = curr.nextNode;\r\n                this._length += 1;\r\n            }\r\n\r\n            curr.nextNode = next;\r\n            return this;\r\n        }\r\n\r\n        insert(ind, ...args) {\r\n            if (ind === 0) {\r\n                this.prepend(...args);\r\n            }\r\n            else {\r\n                let itemsToAdd = args.map(el => { return new listNode(el); });\r\n\r\n                let prev = getNodeAtIndex.call(this, ind - 1);\r\n                let next = prev.nextNode;\r\n\r\n                prev.nextNode = itemsToAdd[0];\r\n                this._length += 1;\r\n\r\n                let curr = prev.nextNode;\r\n                for (let i = 1, len = itemsToAdd.length; i < len; i += 1) {\r\n                    curr.nextNode = itemsToAdd[i];\r\n                    curr = curr.nextNode;\r\n                    this._length += 1;\r\n                }\r\n\r\n                curr.nextNode = next;\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        at(ind, param) {\r\n            if (param === undefined) {\r\n                return getNodeAtIndex.call(this, ind).data;\r\n            }\r\n            else {\r\n                if (ind === 0) {\r\n                    this._firstNode.data = param;\r\n                }\r\n                else {\r\n                    getNodeAtIndex.call(this, ind).data = param;\r\n                }\r\n\r\n                return this;\r\n            }\r\n        }\r\n\r\n        removeAt(ind) {\r\n            let prev, removed;\r\n            if (ind === 0) {\r\n                removed = this._firstNode.data;\r\n                this._firstNode = this._firstNode.nextNode;\r\n            }\r\n            else if (ind === this._length - 1) {\r\n                prev = getNodeAtIndex.call(this, ind - 1);\r\n                removed = prev.nextNode.data;\r\n                prev.nextNode = null;\r\n            }\r\n            else {\r\n                prev = getNodeAtIndex.call(this, ind - 1);\r\n                let curr = prev.nextNode;\r\n                removed = curr.data;\r\n                prev.nextNode = curr.nextNode;\r\n            }\r\n\r\n            this._length -= 1;\r\n            return removed;\r\n        }\r\n\r\n        toString() {\r\n            let curr = this._firstNode;\r\n            let str = '';\r\n\r\n            while (curr.nextNode !== null) {\r\n                str += curr.data + ' -> ';\r\n                curr = curr.nextNode;\r\n            }\r\n\r\n            str += curr.data;\r\n\r\n            return str;\r\n        }\r\n\r\n        toArray() {\r\n            let arr = [];\r\n            for (let node of this) {\r\n                arr.push(node);\r\n            }\r\n\r\n            return arr;\r\n        }\r\n\r\n        [Symbol.iterator]() {\r\n            let curr = this._firstNode;\r\n            return {\r\n                next: function () {\r\n                    if (curr === null) {\r\n                        return { done: true };\r\n                    }\r\n                    else {\r\n                        let data = curr.data;\r\n                        curr = curr.nextNode;\r\n                        return {\r\n                            value: data,\r\n                            done: false\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    return LinkedList;\r\n})(listNode);\r\n\r\nmodule.exports = LinkedList;"]}