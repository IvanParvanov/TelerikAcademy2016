{"version":3,"sources":["task-1.js"],"names":[],"mappings":"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","file":"task-1-compiled.js","sourcesContent":["'use strict';\nclass listNode {\n    constructor(value) {\n        this._data = value;\n        this._nextNode = null;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set data(value) {\n        this._data = value;\n    }\n\n    get nextNode() {\n        return this._nextNode;\n    }\n\n    set nextNode(val) {\n        this._nextNode = val;\n    }\n}\n\nvar LinkedList = (function () {\n\n    function getNodeAt(nodeIndex) {\n        let currNode;\n\n        if (nodeIndex < 0 || this._length - 1 < nodeIndex) {\n            currNode = null;\n        }\n        else {\n            currNode = this._firstNode;\n\n            for(let i = 0; i < nodeIndex; i++) {\n                currNode = currNode.nextNode;\n            }\n        }\n\n        return currNode;\n    }\n\n    function getNodeArray(args) {\n        return args.map(value => new listNode(value));\n    }\n\n    class LinkedList {\n        constructor() {\n            this._length = 0;\n            this._firstNode = null;\n        }\n\n        get first() {\n            return this._firstNode\n                ? this._firstNode.data\n                : null;\n        }\n\n        get last() {\n            if (this._firstNode !== null) {\n                return getNodeAt.call(this, this._length - 1).data;\n            }\n            else {\n                return null;\n            }\n        }\n\n        get length() {\n            return this._length;\n        }\n\n        append(...args) {\n            let nodesToAppend = getNodeArray(args);\n\n            let last;\n\n            if (this._firstNode === null) {\n                this._firstNode = nodesToAppend[0];\n                last = this._firstNode;\n            }\n            else {\n                last = getNodeAt.call(this, this._length - 1);\n                last.nextNode = nodesToAppend[0];\n                last = last.nextNode;\n            }\n\n            this._length += 1;\n\n            for (let i = 1, len = nodesToAppend.length; i < len; i += 1) {\n                last.nextNode = nodesToAppend[i];\n                last = last.nextNode;\n                this._length += 1;\n            }\n\n            return this;\n        }\n\n        prepend(...args) {\n            let nodesToPrepend = getNodeArray(args);\n\n            let next = this._firstNode;\n            this._firstNode = nodesToPrepend[0];\n            this._length += 1;\n\n            let curr = this._firstNode;\n            for (let i = 1, len = nodesToPrepend.length; i < len; i += 1) {\n                curr.nextNode = nodesToPrepend[i];\n                curr = curr.nextNode;\n                this._length += 1;\n            }\n\n            curr.nextNode = next;\n            return this;\n        }\n\n        insert(index, ...args) {\n            if (index === 0) {\n                this.prepend(...args);\n            }\n            else {\n                let itemsToAdd = getNodeArray(args);\n\n                let prev = getNodeAt.call(this, index - 1);\n                let next = prev.nextNode;\n\n                prev.nextNode = itemsToAdd[0];\n                this._length += 1;\n\n                let curr = prev.nextNode;\n                for (let i = 1, len = itemsToAdd.length; i < len; i += 1) {\n                    curr.nextNode = itemsToAdd[i];\n                    curr = curr.nextNode;\n                    this._length += 1;\n                }\n\n                curr.nextNode = next;\n            }\n\n            return this;\n        }\n\n        at(index, value) {\n            if (value === undefined) {\n                return getNodeAt.call(this, index).data;\n            }\n            else {\n                if (index === 0) {\n                    this._firstNode.data = value;\n                }\n                else {\n                    getNodeAt.call(this, index).data = value;\n                }\n\n                return this;\n            }\n        }\n\n        removeAt(index) {\n            let prev, removed;\n            if (index === 0) {\n                removed = this._firstNode.data;\n                this._firstNode = this._firstNode.nextNode;\n            }\n            else if (index === this._length - 1) {\n                prev = getNodeAt.call(this, index - 1);\n                removed = prev.nextNode.data;\n                prev.nextNode = null;\n            }\n            else {\n                prev = getNodeAt.call(this, index - 1);\n                let curr = prev.nextNode;\n                removed = curr.data;\n                prev.nextNode = curr.nextNode;\n            }\n\n            this._length -= 1;\n            return removed;\n        }\n\n        toString() {\n            let curr = this._firstNode;\n            let str = '';\n\n            while (curr.nextNode !== null) {\n                str += curr.data + ' -> ';\n                curr = curr.nextNode;\n            }\n\n            str += curr.data;\n\n            return str;\n        }\n\n        toArray() {\n            let arr = [];\n            for (let node of this) {\n                arr.push(node);\n            }\n\n            return arr;\n        }\n\n        [Symbol.iterator]() {\n            let curr = this._firstNode;\n            return {\n                next: function () {\n                    if (curr === null) {\n                        return {done: true};\n                    }\n                    else {\n                        let data = curr.data;\n                        curr = curr.nextNode;\n                        return {\n                            value: data,\n                            done: false\n                        };\n                    }\n                }\n            };\n        }\n    }\n\n    return LinkedList;\n})();\n\nmodule.exports = LinkedList;\n"]}