{"version":3,"sources":["task-1.js"],"names":[],"mappings":"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","file":"task-1-compiled.js","sourcesContent":["/* Task Description */\n/* \n* Create a module for a Telerik Academy course\n  * The course has a title and presentations\n    * Each presentation also has a title\n    * There is a homework for each presentation\n  * There is a set of students listed for the course\n    * Each student has firstname, lastname and an ID\n      * IDs must be unique integer numbers which are at least 1\n  * Each student can submit a homework for each presentation in the course\n  * Create method init\n    * Accepts a string - course title\n    * Accepts an array of strings - presentation titles\n    * Throws if there is an invalid title\n      * Titles do not start or end with spaces\n      * Titles do not have consecutive spaces\n      * Titles have at least one character\n    * Throws if there are no presentations\n  * Create method addStudent which lists a student for the course\n    * Accepts a string in the format 'Firstname Lastname'\n    * Throws if any of the names are not valid\n      * Names start with an upper case letter\n      * All other symbols in the name (if any) are lowercase letters\n    * Generates a unique student ID and returns it\n  * Create method getAllStudents that returns an array of students in the format:\n    * {firstname: 'string', lastname: 'string', id: StudentID}\n  * Create method submitHomework\n    * Accepts studentID and homeworkID\n      * homeworkID 1 is for the first presentation\n      * homeworkID 2 is for the second one\n      * ...\n    * Throws if any of the IDs are invalid\n  * Create method pushExamResults\n    * Accepts an array of items in the format {StudentID: ..., Score: ...}\n      * StudentIDs which are not listed get 0 points\n    * Throw if there is an invalid StudentID\n    * Throw if same StudentID is given more than once ( he tried to cheat (: )\n    * Throw if Score is not a number\n  * Create method getTopStudents which returns an array of the top 10 performing students\n    * Array must be sorted from best to worst\n    * If there are less than 10, return them all\n    * The final score that is used to calculate the top performing students is done as follows:\n      * 75% of the exam result\n      * 25% the submitted homework (count of submitted homeworks / count of all homeworks) for the course\n*/\n\"use strict\";\nvar solve = function solve() {\n\tvar currentId = 0;\n\tfunction getNextId() {\n\t\tcurrentId += 1;\n\t\treturn currentId;\n\t}\n\n\tfunction splitStudentName(name) {\n\t\tif(typeof name != 'string') {\n\t\t\tthrow new Error(\"Name is not a string!\");\n\t\t}\n\n\t\tlet names = name.split(' ');\n\n\t\tif(names.length > 2 || !names[0] || !names[1]) {\n\t\t\tthrow new Error(incorrectFormatMessage);\n\t\t}\n\t\tlet firstName = names[0];\n\t\tlet lastName = names[1];\n\n\t\tcheckSingleNameValidity(firstName);\n\t\tcheckSingleNameValidity(lastName);\n\n\t\treturn {\n\t\t\tfirstname: firstName,\n\t\t\tlastname: lastName\n\t\t}\n\t}\n\n\tfunction checkSingleNameValidity(name) {\n\t\tconst incorrectFormatMessage = \"Name has incorrect format!\";\n\n\t\tif(name.length === 0) {\n\t\t\tthrow new Error(incorrectFormatMessage);\n\n\t\t}\n\n\t\tif(name[0] != name[0].toUpperCase()) {\n\t\t\tthrow new Error(incorrectFormatMessage);\n\t\t}\n\n\t\tfor(let i = 1; i < name.length; i++) {\n\t\t\tif(name[i] != name[i].toLowerCase()) {\n\t\t\t\tthrow new Error(incorrectFormatMessage);\n\t\t\t}\n\n\t\t\tif(name[i].toLowerCase() === name[i].toUpperCase()) {\n\t\t\t\tthrow new Error(incorrectFormatMessage);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction validateTitle(title) {\n\t\tif(title.length === 0) {\n\t\t\tthrow new Error(\"Titles must be at least 1 character long!\")\n\t\t}\n\n\t\tif(title[0] === ' ' || title[title.length - 1] === ' ') {\n\t\t\tthrow new Error(\"Titles do not start or end with a space!\")\n\t\t}\n\n\t\tvar match = title.match(/\\s\\s+/);\n\t\tif(match != null) {\n\t\t\tthrow new Error(\"Titles cannot have two or more consecutive spaces!\")\n\t\t}\n\t}\n\n\n\tfunction validateTitles(titles) {\n\t\tif(!titles.length || titles.length === 0) {\n\t\t\tthrow new Error(\"No titles have been passed!\")\n\t\t}\n\n\t\tfor(var title of titles) {\n\t\t\tvalidateTitle(title);\n\t\t}\n\t}\n\n\tvar Course = {\n\t\tinit: function(title, presentations) {\n\t\t\tvalidateTitle(title);\n\t\t\tvalidateTitles(presentations);\n\n\t\t\tthis._title = title;\n\t\t\tthis._presentations = presentations;\n\t\t\tthis._students = [];\n\t\t},\n\t\taddStudent: function(name) {\n\t\t\tlet names = splitStudentName(name);\n\t\t\tvar studentId = getNextId();\n\t\t\tthis._students.push(\n\t\t\t\t{\n\t\t\t\t\tfirstname: names.firstname,\n\t\t\t\t\tlastname: names.lastname,\n\t\t\t\t\tid: studentId,\n\t\t\t\t\thomeworks: []\n\t\t\t\t}\n\t\t\t);\n\t\t\treturn studentId;\n\t\t},\n\t\tgetAllStudents: function() {\n\t\t\treturn this._students;\n\t\t},\n\t\tsubmitHomework: function(studentID, homeworkID) {\n\t\t\tlet student = this._students.filter(x => x.id === studentID);\n\t\t\tlet homeworkIndex = homeworkID - 1;\n\n\t\t\tif(studentID != parseInt(studentID, 10)\n\t\t\t|| homeworkID != parseInt(homeworkID, 10)) {\n\t\t\t\tthrow new Error(\"Id must be an integer!\");\n\n\t\t\t}\n\n\t\t\tif(student.length === 0) {\n\t\t\t\tthrow new Error(\"No student with such ID!\");\n\t\t\t}\n\n\t\t\tif(homeworkIndex < 0 || this._presentations.length <= homeworkIndex) {\n\t\t\t\tthrow new Error(\"Invalid homework ID!\");\n\t\t\t}\n\n\t\t},\n\t\tpushExamResults: function(results) {\n\t\t\t//{StudentID: ..., score: ...}\n\t\t\tlet filteredResults = [];\n\n\t\t\tfor(let result of results) {\n\n\t\t\t\tif(typeof result.score === 'undefined' || isNaN(result.score) || result.score < 0 || result.score != parseInt(result.score)) {\n\t\t\t\t\tthrow new Error(\"Score is not a valid number!\")\n\t\t\t\t}\n\n\t\t\t\tif(filteredResults.some(x => x.StudentID === result.StudentID)) {\n\t\t\t\t\tthrow new Error(\"Duplicate student in exam results!\");\n\t\t\t\t}\n\n\t\t\t\tif(!this._students.some(x => x.id === result.StudentID)) {\n\t\t\t\t\tthrow new Error(\"Invalid student id! Student not found!\");\n\t\t\t\t}\n\n\t\t\t\tfilteredResults.push(result);\n\t\t\t}\n\t\t},\n\t\tgetTopStudents: function() {\n\n\t\t}\n\t};\n\n\treturn Course;\n};\n\n\nmodule.exports = solve;\n"]}